{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to SSC","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"quickstart/","title":"Quick Start","text":"<p>The Quick Start Guide is a step-by-step onboarding guide for users who are new to SovereignSecure Cloud.  With this guide, you can quickly learn how to use the Cloud Console, a unified management tool that enables you to efficiently manage and set up various cloud resources, and start providing cloud services. </p> <p>This documentation is designed to be easy for beginners to learn about SovereignSecure Cloud, so we've simplified the complex setup tasks as much as possible by using the same organization, project, region, and availability zones in each of the complex learning modules. </p> <ul> <li>Organization </li> <li>Project </li> <li>Region </li> <li>VPC </li> <li>Subnet </li> </ul> <p>SovereignSecure Cloud</p> <p>Organization</p> <p>Project</p> <p>Region</p> <p>VPC</p> <p>Subnet</p> <p>Availability Zone</p>"},{"location":"quickstart/login/","title":"Client","text":"<p>OpenStackClient looks for a <code>clouds.yaml</code> configuration file in the following locations:</p> <ul> <li>current directory</li> <li><code>~/.config/openstack</code></li> <li><code>/etc/openstack</code></li> </ul> <p>With the OpenStack client you can specify the cloud profile specified in the <code>clouds.yaml</code> configuration file  by providing the <code>--os-cloud &lt;cloud identifier&gt;</code> parameter.</p> <pre><code>openstack --os-cloud openstack network list\n</code></pre>"},{"location":"quickstart/login/#migration-from-openrc-to-cloudsyaml","title":"Migration from openrc to clouds.yaml","text":"<p>If you have your <code>openrc</code> file  but you need this information in a <code>clouds.yaml</code> file, this can easily be converted.</p>"},{"location":"quickstart/login/#with-an-editor","title":"With an editor","text":"<p>Example content of a <code>openrc</code> file downloaded from Horizon dashboard.</p> PROJECT-openrc.sh<pre><code>#!/usr/bin/env bash\n# To use an OpenStack cloud you need to authenticate against the Identity\n# service named keystone, which returns a **Token** and **Service Catalog**.\n# The catalog contains the endpoints for all services the user/tenant has\n# access to - such as Compute, Image Service, Identity, Object Storage, Block\n# Storage, and Networking (code-named nova, glance, keystone, swift,\n# cinder, and neutron).\n#\n# *NOTE*: Using the 3 *Identity API* does not necessarily mean any other\n# OpenStack API is version 3. For example, your cloud provider may implement\n# Image API v1.1, Block Storage API v2, and Compute API v2.0. OS_AUTH_URL is\n# only for the Identity API served through keystone.\nexport OS_AUTH_URL=https://api-external.sovereignsecure.cloud:5000/v3\n# With the addition of Keystone we have standardized on the term **project**\n# as the entity that owns the resources.\nexport OS_PROJECT_ID=PROJECT_ID\nexport OS_PROJECT_NAME=\"PROJECT\"\nexport OS_USER_DOMAIN_NAME=\"DOMAIN\"\nif [ -z \"$OS_USER_DOMAIN_NAME\" ]; then unset OS_USER_DOMAIN_NAME; fi\nexport OS_PROJECT_DOMAIN_ID=\"DOMAIN_ID\"\nif [ -z \"$OS_PROJECT_DOMAIN_ID\" ]; then unset OS_PROJECT_DOMAIN_ID; fi\n# unset v2.0 items in case set\nunset OS_TENANT_ID\nunset OS_TENANT_NAME\n# In addition to the owning entity (tenant), OpenStack stores the entity\n# performing the action as the **user**.\nexport OS_USERNAME=\"USERNAME\"\n# With Keystone you pass the keystone password.\necho \"Please enter your OpenStack Password for project $OS_PROJECT_NAME as user $OS_USERNAME: \"\nread -sr OS_PASSWORD_INPUT\nexport OS_PASSWORD=$OS_PASSWORD_INPUT\n# If your configuration has multiple regions, we set that information here.\n# OS_REGION_NAME is optional and only valid in certain environments.\nexport OS_REGION_NAME=\"RegionOne\"\n# Don't leave a blank variable, unset it if it was empty\nif [ -z \"$OS_REGION_NAME\" ]; then unset OS_REGION_NAME; fi\nexport OS_INTERFACE=public\nexport OS_IDENTITY_API_VERSION=3\n</code></pre> <p>First you need to create a <code>clouds.yaml</code> file. Take care of the indentation and use spaces instead of tabs.</p> clouds.yaml<pre><code>clouds:\n  openstack:\n    auth:\n      auth_url: &lt;OS_AUTH_URL goes here&gt;\n      password: &lt;OS_PASSWORD goes here, if not set, enter you password here&gt;\n      project_domain_name: &lt;OS_PROJECT_DOMAIN_NAME goes here&gt;\n      project_name: &lt;OS_PROJECT_NAME goes here&gt;\n      user_domain_name: &lt;OS_USER_DOMAIN_NAME goes here&gt;\n      username: &lt;OS_USERNAME goes here&gt;\n   region_name: &lt;OS_REGION_NAME goes here&gt;\n   identity_api_version: &lt;OS_IDENTITY_API_VERSION goes here&gt;\n   interface: &lt;OS_INTERFACE goes here&gt;\n</code></pre> <p>The final <code>clouds.yaml</code> for your <code>openrc</code> will then look like this one. The content from the previous <code>PROJECT-openrc.sh</code> example was used here.</p> clouds.yaml<pre><code>clouds:\n  openstack:\n    auth:\n      auth_url: https://api-external.sovereignsecure.cloud:5000/v3\n      password: PASSWORD\n      project_domain_name: DOMAIN\n      project_name: PROJECT\n      user_domain_name: DOMAIN\n      username: USERNAME\n   region_name: RegionOne\n   identity_api_version: 3\n   interface: public\n</code></pre>"},{"location":"quickstart/login/#with-a-script","title":"With a script","text":""},{"location":"quickstart/login/#python","title":"Python","text":"clouds.py<pre><code>import os\nimport yaml\n\nclouds = {\n  \"clouds\":{\n    \"openstack\": {\n      \"auth\" : {\n        \"auth_url\" : os.environ[\"OS_AUTH_URL\"],\n        \"project_name\": os.environ[\"OS_PROJECT_NAME\"],\n        \"project_domain_name\": os.environ[\"OS_PROJECT_DOMAIN_NAME\"],\n        \"username\": os.environ[\"OS_USERNAME\"],\n        \"user_domain_name\": os.environ[\"OS_USER_DOMAIN_NAME\"],\n        \"password\": os.environ[\"OS_PASSWORD\"],\n      },\n      \"region_name\": os.environ[\"OS_REGION_NAME\"],\n      \"identity_api_version\":  os.environ[\"OS_IDENTITY_API_VERSION\"],\n      \"interface\": \"public\"\n    }\n  }\n}\n\nprint(yaml.dump(clouds))\n</code></pre> <p>First you need to source your <code>openrc</code> file so that the <code>OS_</code> variables are available.</p> <pre><code>source PROJECT-openrc.sh\n</code></pre> <p>Now you can execute the Python script and a <code>clouds.yaml</code> will be written.</p> <pre><code>python3 clouds.py &gt; clouds.yaml\n</code></pre>"},{"location":"quickstart/login/#bash","title":"Bash","text":"<p>You need to point the <code>source</code> line to your <code>openrc</code> file first. Then execute the Bash script. This will create the <code>clouds.yaml</code> file in your currect directory</p> <pre><code>#!/bin/bash\n\nsource PROJECT-openrc.sh\n\nPROJECT_ID=$(openstack project list | grep $OS_PROJECT_NAME | awk '{print $2}')\n\ncat &lt;&lt; EOF &gt; clouds.yaml\nclouds:\n  openstack:\n    auth:\n      auth_url: $OS_AUTH_URL\n      username: \"$OS_USERNAME\"\n      password: \"$OS_PASSWORD\"\n      project_name: \"$OS_PROJECT_NAME\"\n      project_id: \"$PROJECT_ID\"\n      user_domain_name: \"$OS_USER_DOMAIN_NAME\"\n    region_name: \"$OS_REGION_NAME\"\n    interface: \"public\"\n    identity_api_version: $OS_IDENTITY_API_VERSION\nEOF\n</code></pre>"}]}